// <auto-generated />
using System;
using FlightDocV1._1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightDocV1._1.Migrations
{
    [DbContext(typeof(FlightDocContext))]
    partial class FlightDocContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FlightDocV1._1.Models.DocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserSectionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserSectionID");

                    b.ToTable("DocTypes");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DocTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("FlightID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("NewestVersion")
                        .HasColumnType("real");

                    b.Property<int>("NewestVersionID")
                        .HasColumnType("int");

                    b.Property<int>("UserSectionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocTypeID")
                        .IsUnique();

                    b.HasIndex("FlightID");

                    b.HasIndex("UserSectionID")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.DocumentPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentID");

                    b.HasIndex("GroupID");

                    b.ToTable("DocumentPermissions");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Aircraft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("To_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DocTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocTypeID");

                    b.HasIndex("GroupID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deactivated")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.UserSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupID");

                    b.HasIndex("RoleID")
                        .IsUnique()
                        .HasFilter("[RoleID] IS NOT NULL");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("UserSections");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdaterEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("VersionNum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DocumentID");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.DocType", b =>
                {
                    b.HasOne("FlightDocV1._1.Models.UserSection", "UserSection")
                        .WithMany("DocTypes")
                        .HasForeignKey("UserSectionID");

                    b.Navigation("UserSection");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Document", b =>
                {
                    b.HasOne("FlightDocV1._1.Models.DocType", "DocType")
                        .WithOne("Document")
                        .HasForeignKey("FlightDocV1._1.Models.Document", "DocTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightDocV1._1.Models.Flight", "Flight")
                        .WithMany("Documents")
                        .HasForeignKey("FlightID");

                    b.HasOne("FlightDocV1._1.Models.UserSection", "UserSection")
                        .WithOne("Document")
                        .HasForeignKey("FlightDocV1._1.Models.Document", "UserSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocType");

                    b.Navigation("Flight");

                    b.Navigation("UserSection");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.DocumentPermission", b =>
                {
                    b.HasOne("FlightDocV1._1.Models.Document", "Document")
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightDocV1._1.Models.Group", "Group")
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("GroupID");

                    b.Navigation("Document");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Permission", b =>
                {
                    b.HasOne("FlightDocV1._1.Models.DocType", "DocType")
                        .WithMany("Permissions")
                        .HasForeignKey("DocTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightDocV1._1.Models.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupID");

                    b.Navigation("DocType");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.UserSection", b =>
                {
                    b.HasOne("FlightDocV1._1.Models.Group", "Group")
                        .WithMany("UserSections")
                        .HasForeignKey("GroupID");

                    b.HasOne("FlightDocV1._1.Models.Role", "Role")
                        .WithOne("UserSection")
                        .HasForeignKey("FlightDocV1._1.Models.UserSection", "RoleID");

                    b.HasOne("FlightDocV1._1.Models.User", "User")
                        .WithOne("UserSection")
                        .HasForeignKey("FlightDocV1._1.Models.UserSection", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Version", b =>
                {
                    b.HasOne("FlightDocV1._1.Models.Document", "Document")
                        .WithMany("Versions")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.DocType", b =>
                {
                    b.Navigation("Document");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Document", b =>
                {
                    b.Navigation("DocumentPermissions");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Flight", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Group", b =>
                {
                    b.Navigation("DocumentPermissions");

                    b.Navigation("Permissions");

                    b.Navigation("UserSections");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.Role", b =>
                {
                    b.Navigation("UserSection");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.User", b =>
                {
                    b.Navigation("UserSection");
                });

            modelBuilder.Entity("FlightDocV1._1.Models.UserSection", b =>
                {
                    b.Navigation("DocTypes");

                    b.Navigation("Document");
                });
#pragma warning restore 612, 618
        }
    }
}
